STS 프로젝트 생성

[처음 STS설치시만]
STS설치

Market placet -> Spring tools 3 add-on install
===================================================================================================================
legacy project생성

pom.xml dependancy 버전설정 및 추가

버전설정
jdk 1.8
spring 4.2.1
junit 4.12
추가
mybatis 3.2.8
mybatis-spring 1.2.2
spring-jdbc 4.2.1
spring-test 4.2.1
jackson-databind 2.5.4
spring-aop 4.2.1
spring-tx 4.2.1
aspectjrt 1.5.4
aspectjweaver 1.5.4
commons-fileupload 1.3.1
imgscalr 4.2



project facets 버전 설정
===================================================================================================================
[처음 STS설치시만]

인코딩 설정
window preferences
general workspace 
	->text encoding
json 	->json file
web 	->css
	->html
	->jsp


html5 templates 작업

window preferences
jsp files -> editor -> templates
New JSP File (html 5)	JSP with html 5 markup에
	<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
	<%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt" %>
	<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn" %>
추가로 cdn방식으로
https://www.w3schools.com/의 lean bootstrap3에서 try it을 눌러 <meta~ 부터 /head>전까지 복사

	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
	<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>

meta charset="euc-kr"에 붙여넣는다.
그리고 이를 위 템플릿에 집어넣는다.


===================================================================================================================
web.xml 필터를 통한 post방식 인코딩작업

maven dependencies-> spring-web-4.2.1-> web.filter -> charencoding 이용


<filter>
	<filter-name>encoding</filter-name>
	<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
	<init-param>
		<param-name>encoding</pama-name>
		<param-value>UTF-8</param-value>
	</init-param>
	
	<init-param>
		<param-name>forceEncoding</param-name>
		<param-value>true</param-value>
	</init-param>
</filter>
<filter-mapping>
	<filter-name>encoding</filter-name>
	<url-pattern>/*</url-pattern>
</filter-mapping>

get방식 인코딩 작업
2가지방법
1.
servers-tomcat v7.0~-server.xml의
65번line<Connector connectionTimeout="20000" port="8089" protocol="HTTP/1.1" redirectPort="8443"/>
에 URIEncoding="UTF-8"를 추가한다.

2.static method이용 필요할 때 마다 불러오기

===================================================================================================================
Root-Context.xml설정

root-context의 namespace tab
aop/context/jdbc/mybatis/tx/추가

bean 설정
	DataSource설정
<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
<property value="oracle.jdbc.driver.OracleDriver" name="driverClassName"></property>
<property value="jdbc:oracle:thin:@localhost:1521:xe(url)" name="url"></property>
<property value="xxxxxxxxxxxxxx(sql id)" name="username"></property>
<property value="xxxxxxxxxxxxxx(sql pw)" name="password"></property>
</bean>
	Mybatis설정
	Mapper설정
<bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
<property name="dataSource" ref="dataSource"></property>
<property name="configLocation" value="classpath:/mybatis-config.xml"></property>
<property name="mapperLocations" value="classpath:mappers/**/*Mapper.xml"></property>
</bean>
	SqlSession 설정
<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory">
</constructor-arg>
</bean>

	TransactionManager설정
<bean id="transactionManager" 
      class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource"/>
</bean>

component-scan설정/service/persistence/aop
	<context:component-scan base-package="kr.co.service" />
	<context:component-scan base-package="kr.co.persistence" />
	<context:component-scan base-package="kr.co.aop" />

aspectj자동프록시설정
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>	

multi transaction설정(선언적transaction방법이아닌 명시적 transaction방법으로했다.)
	<tx:annotation-driven/>

===================================================================================================================
Mybatis 환경설정
src/main/resources에 mybatis-config.xml 생성
mybatis-config.xml검색하여
https://mybatis.org/mybatis-3/ko/getting-started.html접속
xml에서 sqlsessionfacory빌드하기 코드 복사하여 넣고 저장(단 configuration안에 있는 코드는 지워준다.)

configuration 내부 작성내용
<typeAliases>
		<package name="kr.co.domain"/> <--이처럼 한번 작성하거나
		<typeAlias alias="MemberDTO" (type="kr.co.domain.MemberDTO"생략가능)/> <--이를 패키지안 클래스마다 작성
</typeAliases>



src/main/resources 에 mappers 폴더 만들고 mapper파일들을 모아준다.
우선 xml file생성
memberMapper.xml//xxxMapper.xml로 생성해야한다.
mapper.xml파일들의 이름은 다 xxMapper.xml로 생성(*Mapper.xml을통해 mapper로 구분/아래 root-context 매퍼location설정)


mybatis-config.xml검색하여
https://mybatis.org/mybatis-3/ko/getting-started.html접속
매핑된 sql구문살펴보기의 코드 복사하여 memberMapper.xml에 붙여넣기


namespace는 id가 같을 경우 구분해준다.
이는 호출할떄 namespace.id 로 호출
resulttype에 해당하는 클래스가 미리 지정한 이곳(mybatis-config.xml에서 설정)에서는 domain에 존재해야 한다.

매퍼파일에서 sql문,namespace,id,resultType을 수정하고 저장
select * from member같은 sql문을 실행하더라도 list타입으로 받지 않고 generic타입으로 받는다.

root-context에 매퍼폴더 위치 설정
<property name="mapperLocations" value="classpath:mappers/**/*Mapper.xml"></property>
mappers폴더안의 어떤폴더인지 상관없이 xxxMapper.xml이면 mapper로 인식하도록 해주는 설정

<bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
<property name="dataSource" ref="dataSource"></property>
<property name="configLocation" value="classpath:/mybatis-config.xml"></property>
<property name="mapperLocations" value="classpath:mappers/**/*Mapper.xml"></property>
</bean>


===================================================================================================================
Servlet-Context.xml 설정

bean 설정
	multipartresolver 설정 (property로 업로드사이즈제한)
<beans:bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" id="multipartResolver">
	<beans:property name="maxUploadSize" value="1048760"></beans:property>
</beans:bean>

componet-scan설정 /controller
	<context:component-scan base-package="kr.co.ca" />


===================================================================================================================
jdbc연결 테스트
src/test/java에 클래스성성
@runwith 어노테이션 붙이고 @RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration 어노테이션도 붙인다.
	file:(/World/제거)src/main/webapp/WEB-INF/spring/(root-context.xml servletcontext까지 
	고려하면 /**/*.xml로 대체 하는 경우도 있다.)
	@ContextConfiguration(locations = {"file:/src/main/webapp/WEB-INF/spring/**/*.xml"})

class안쪽에
@Auotowired(==@Inject) 어노테이션 적용
	private DataSource dataFactory; 변수선언
	기존까지는 이렇게 선언하면 datafactory는 null이었지만								autowired가 springframework가 관리하는 bean을 자동으로 넣어준다
@Test
테스트할 메소드에는 test어노테이션을 반드시 붙여준다.
반환형은 반드시 void 파라미터는 반드시 없어야 한다.

테스트시 모든 메서드를 테스트하려면 그냥 우클릭을통해 하고 특정 메소드만 하고 싶다면 메소드이름을 드래그 한 후 runas junit

===================================================================================================================
Mybatis연결 테스트
위와 동일
단 connnection대신 session
datafactory대신 SqlSessionFactory sqlFactory
session 연결은 sqlFactory의 openSession method
===================================================================================================================