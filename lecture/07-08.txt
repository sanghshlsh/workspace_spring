AOP(Aspect-Oriented-Programming)
지금까지처럼 핵심기능관점에서 바라보는것이아닌
부가기능 관점에서 바라보고 수행하는 프로그래밍기법

부가기능엣거 바라보고 공통된영역을 잘라낸다고 하여
Cross-Cutting이라고 불리기도 한다.

참고 블로그
https://jojoldu.tistory.com/71
=============================================================
decendancy추가

spring-aop 4.2.1
spring-tx 4.2.1
aspectjrt 1.5.4
aspectjweaver 1.5.4

AOP(service에서 실행)
-대표적 기능 transaction(service에서 구현)
================================================================
설치후
root-context.xml
하단 namespace tab의
 aop,context,mybatis,tx 체크 확인
<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
================================================================
advice객체 생성할때는
@component를 활용한다.
================================================================


AOP 용어정리
aspect : 공통관심사에 대한 추상적인 명칭[핵심 기능에 부가되어 의미를 갖는 특별한 모듈
(부가될 기능을 정의한 advice와 어디에 적용할 지 결정할 point cut을 함께 갖는다.)]


advice : 공통관심사에 대한 특정 기능을 실제로 구현된 객체[target object에 종속되지 않는다.
(aspect가 '무엇'을 '언제'할지 정의)]
	-around adivce
	-before advice
	-after advice


target : advice가 적용될 대상 객체(부가기능을 부여할 대상)


join points :  target의 메서드 중에서 advice가 적용될 수 있는 모든 메서드


point cut : join points중 advice가 적용되어 실행되는 특정 메서드
(advice를 적용할 join point를 선별하는 기능을 정의한 모듈)

point cut 표현식 @Around("execution(* kr.co.service.AOPTestService*.*(..))")
@around -> advice
execution -> 포인트컷 지정자
* -> 리턴타입(*은 모든리턴타입)
kr.co.service.AOPTestService*.* -> target이되는 method지정
(..)-> 인자(argument)타입 [(..)은 모든 타입 인자 허용]

advice 5가지 타입
@Around		- advice가 target method를 감싸서 target method 호출 전후로 수행
@Before		- advice target method 호출 이전에 수행
@After		- target method 결과 관계없이(성공예외도) target method 완료시 수행
@AfterReturning	- 결과값 정상 반환 이후 수행
@AfterThrowing	- target method 수행중 thorw exception시 수행

주의- @Around의 경우 proceed() method가 반드시 호출되어야 한다.
proceed() method는 target method를 지칭

proxy 객체 : 가짜 객체라는 뜻으로 point cut의 코드와 advice의 코드가 합쳐진 객체를 의미함.
클라이언트가 접촉하는 객체는 target이 아니라 proxy 객체.
[target을 감싸 taget의 요청을 대신 받아주는 wrapping object
(클라이언트에서 target 호출시 target을 감싸는 proxy호출,
target method실행 전 선처리/실행후 후처리를 실행시키도록 구성)]


weaving : point cut의 코드와 advice의 코드가 합쳐지는 과정으로 이 과정의 결과물이 proxy객체.
(지정된 객체에 aspect를 적용 새로운 proxy객체를 생성하는 과정)
================================================================
transaction을하려면 root-context에 
<tx:annotation-driven/>
<bean id="transactionManager" 
class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
  <property name="dataSource" ref="dataSource"/>
</bean>
->class : maven-> spring-jdbc->springframework.jdbc.datasource->
datasourcetransactionmanager
->connection할당을 해야하니 datasource를 불러와 property로 넣어준다.

=================================================================

STS에서의 파일 업로드/다운로드


이전에는 cos.jar를 사용했지만
spring에서는
commons-fileupload 1.3.1		cos.jar역할
imgscalr 4.2				썸네일 생성
사용한다.


파일 업로드 작업은
controller에서 수행

servlet-context에 bean생성
class : maven -> spring-web ->multipart.commons->CommonsMultipartResolver classpath이용
id : multipartResolver
property 
	maxUploadSize 입력

===================================================================
FileCopyUtils의 copy method를 이용 업로드한다.

cos.jar에서는 이름을 자동적으로 생성해줬지만
commons-fileupload 에서는 자동적으로 생성하지 않기때문에
method를 만들어 작업해야 하는데
일반적으로 static method를 만들어 UUID객체의 randomUUID() method를 사용해서 만든다.
randomUUID() method를 통해 만들어낸 객체의 toString() method는 _(under bar)가 포함되지 않기때문에 orgName과 _(under bar)를 통해 구분자를 끼워넣어 생성해 orgName또한 새로 생성한 String에서 뽑아 낼 수 도 있다.
이는 시스템이 꺼지지 않는 한 중복을 허용하지 않고 새로운 이름을 생성해 준다.
=====================================================================

Iframe을 이용하면 업로드시 ajax통신과 같은 효과(페이지를 넘어가지않고 통신만하는)를 낼 수 있다.

